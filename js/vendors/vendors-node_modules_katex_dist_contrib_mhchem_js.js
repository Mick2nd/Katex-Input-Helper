/*! For license information please see vendors-node_modules_katex_dist_contrib_mhchem_js.js.LICENSE.txt */
(self.webpackChunkjoplin_plugin_katex_input_helper=self.webpackChunkjoplin_plugin_katex_input_helper||[]).push([["vendors-node_modules_katex_dist_contrib_mhchem_js"],{"./node_modules/katex/dist/contrib/mhchem.js":function(module,__unused_webpack_exports,__webpack_require__){eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! katex */ \"./node_modules/katex/dist/katex.js\"));\n\telse { var i, a; }\n})((typeof self !== 'undefined' ? self : this), function(__WEBPACK_EXTERNAL_MODULE__757__) {\nreturn /******/ (function() { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ 757:\n/***/ (function(module) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__757__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_957__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_957__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t!function() {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_957__.n = function(module) {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\tfunction() { return module['default']; } :\n/******/ \t\t\t\tfunction() { return module; };\n/******/ \t\t\t__nested_webpack_require_957__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t}();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t!function() {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_957__.d = function(exports, definition) {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_957__.o(definition, key) && !__nested_webpack_require_957__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t}();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t!function() {\n/******/ \t\t__nested_webpack_require_957__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }\n/******/ \t}();\n/******/ \t\n/************************************************************************/\nvar __nested_webpack_exports__ = {};\n/* harmony import */ var katex__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_957__(757);\n/* harmony import */ var katex__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__nested_webpack_require_957__.n(katex__WEBPACK_IMPORTED_MODULE_0__);\n/* eslint-disable */\n\n/* -*- Mode: JavaScript; indent-tabs-mode:nil; js-indent-level: 2 -*- */\n\n/* vim: set ts=2 et sw=2 tw=80: */\n\n/*************************************************************\n *\n *  KaTeX mhchem.js\n *\n *  This file implements a KaTeX version of mhchem version 3.3.0.\n *  It is adapted from MathJax/extensions/TeX/mhchem.js\n *  It differs from the MathJax version as follows:\n *    1. The interface is changed so that it can be called from KaTeX, not MathJax.\n *    2. \\rlap and \\llap are replaced with \\mathrlap and \\mathllap.\n *    3. Four lines of code are edited in order to use \\raisebox instead of \\raise.\n *    4. The reaction arrow code is simplified. All reaction arrows are rendered\n *       using KaTeX extensible arrows instead of building non-extensible arrows.\n *    5. \\tripledash vertical alignment is slightly adjusted.\n *\n *    This code, as other KaTeX code, is released under the MIT license.\n * \n * /*************************************************************\n *\n *  MathJax/extensions/TeX/mhchem.js\n *\n *  Implements the \\ce command for handling chemical formulas\n *  from the mhchem LaTeX package.\n *\n *  ---------------------------------------------------------------------\n *\n *  Copyright (c) 2011-2015 The MathJax Consortium\n *  Copyright (c) 2015-2018 Martin Hensel\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n//\n// Coding Style\n//   - use '' for identifiers that can by minified/uglified\n//   - use \"\" for strings that need to stay untouched\n// version: \"3.3.0\" for MathJax and KaTeX\n// Add \\ce, \\pu, and \\tripledash to the KaTeX macros.\nkatex__WEBPACK_IMPORTED_MODULE_0___default().__defineMacro(\"\\\\ce\", function (context) {\n  return chemParse(context.consumeArgs(1)[0], \"ce\");\n});\n\nkatex__WEBPACK_IMPORTED_MODULE_0___default().__defineMacro(\"\\\\pu\", function (context) {\n  return chemParse(context.consumeArgs(1)[0], \"pu\");\n}); //  Needed for \\bond for the ~ forms\n//  Raise by 2.56mu, not 2mu. We're raising a hyphen-minus, U+002D, not \n//  a mathematical minus, U+2212. So we need that extra 0.56.\n\n\nkatex__WEBPACK_IMPORTED_MODULE_0___default().__defineMacro(\"\\\\tripledash\", \"{\\\\vphantom{-}\\\\raisebox{2.56mu}{$\\\\mkern2mu\" + \"\\\\tiny\\\\text{-}\\\\mkern1mu\\\\text{-}\\\\mkern1mu\\\\text{-}\\\\mkern2mu$}}\");\n\n //\n//  This is the main function for handing the \\ce and \\pu commands.\n//  It takes the argument to \\ce or \\pu and returns the corresponding TeX string.\n//\n\nvar chemParse = function (tokens, stateMachine) {\n  // Recreate the argument string from KaTeX's array of tokens.\n  var str = \"\";\n  var expectedLoc = tokens.length && tokens[tokens.length - 1].loc.start;\n\n  for (var i = tokens.length - 1; i >= 0; i--) {\n    if (tokens[i].loc.start > expectedLoc) {\n      // context.consumeArgs has eaten a space.\n      str += \" \";\n      expectedLoc = tokens[i].loc.start;\n    }\n\n    str += tokens[i].text;\n    expectedLoc += tokens[i].text.length;\n  }\n\n  var tex = texify.go(mhchemParser.go(str, stateMachine));\n  return tex;\n}; //\n// Core parser for mhchem syntax  (recursive)\n//\n\n/** @type {MhchemParser} */\n\n\nvar mhchemParser = {\n  //\n  // Parses mchem \\ce syntax\n  //\n  // Call like\n  //   go(\"H2O\");\n  //\n  go: function (input, stateMachine) {\n    if (!input) {\n      return [];\n    }\n\n    if (stateMachine === undefined) {\n      stateMachine = 'ce';\n    }\n\n    var state = '0'; //\n    // String buffers for parsing:\n    //\n    // buffer.a == amount\n    // buffer.o == element\n    // buffer.b == left-side superscript\n    // buffer.p == left-side subscript\n    // buffer.q == right-side subscript\n    // buffer.d == right-side superscript\n    //\n    // buffer.r == arrow\n    // buffer.rdt == arrow, script above, type\n    // buffer.rd == arrow, script above, content\n    // buffer.rqt == arrow, script below, type\n    // buffer.rq == arrow, script below, content\n    //\n    // buffer.text_\n    // buffer.rm\n    // etc.\n    //\n    // buffer.parenthesisLevel == int, starting at 0\n    // buffer.sb == bool, space before\n    // buffer.beginsWithBond == bool\n    //\n    // These letters are also used as state names.\n    //\n    // Other states:\n    // 0 == begin of main part (arrow/operator unlikely)\n    // 1 == next entity\n    // 2 == next entity (arrow/operator unlikely)\n    // 3 == next atom\n    // c == macro\n    //\n\n    /** @type {Buffer} */\n\n    var buffer = {};\n    buffer['parenthesisLevel'] = 0;\n    input = input.replace(/\\n/g, \" \");\n    input = input.replace(/[\\u2212\\u2013\\u2014\\u2010]/g, \"-\");\n    input = input.replace(/[\\u2026]/g, \"...\"); //\n    // Looks through mhchemParser.transitions, to execute a matching action\n    // (recursive)\n    //\n\n    var lastInput;\n    var watchdog = 10;\n    /** @type {ParserOutput[]} */\n\n    var output = [];\n\n    while (true) {\n      if (lastInput !== input) {\n        watchdog = 10;\n        lastInput = input;\n      } else {\n        watchdog--;\n      } //\n      // Find actions in transition table\n      //\n\n\n      var machine = mhchemParser.stateMachines[stateMachine];\n      var t = machine.transitions[state] || machine.transitions['*'];\n\n      iterateTransitions: for (var i = 0; i < t.length; i++) {\n        var matches = mhchemParser.patterns.match_(t[i].pattern, input);\n\n        if (matches) {\n          //\n          // Execute actions\n          //\n          var task = t[i].task;\n\n          for (var iA = 0; iA < task.action_.length; iA++) {\n            var o; //\n            // Find and execute action\n            //\n\n            if (machine.actions[task.action_[iA].type_]) {\n              o = machine.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);\n            } else if (mhchemParser.actions[task.action_[iA].type_]) {\n              o = mhchemParser.actions[task.action_[iA].type_](buffer, matches.match_, task.action_[iA].option);\n            } else {\n              throw [\"MhchemBugA\", \"mhchem bug A. Please report. (\" + task.action_[iA].type_ + \")\"]; // Trying to use non-existing action\n            } //\n            // Add output\n            //\n\n\n            mhchemParser.concatArray(output, o);\n          } //\n          // Set next state,\n          // Shorten input,\n          // Continue with next character\n          //   (= apply only one transition per position)\n          //\n\n\n          state = task.nextState || state;\n\n          if (input.length > 0) {\n            if (!task.revisit) {\n              input = matches.remainder;\n            }\n\n            if (!task.toContinue) {\n              break iterateTransitions;\n            }\n          } else {\n            return output;\n          }\n        }\n      } //\n      // Prevent infinite loop\n      //\n\n\n      if (watchdog <= 0) {\n        throw [\"MhchemBugU\", \"mhchem bug U. Please report.\"]; // Unexpected character\n      }\n    }\n  },\n  concatArray: function (a, b) {\n    if (b) {\n      if (Array.isArray(b)) {\n        for (var iB = 0; iB < b.length; iB++) {\n          a.push(b[iB]);\n        }\n      } else {\n        a.push(b);\n      }\n    }\n  },\n  patterns: {\n    //\n    // Matching patterns\n    // either regexps or function that return null or {match_:\"a\", remainder:\"bc\"}\n    //\n    patterns: {\n      // property names must not look like integers (\"2\") for correct property traversal order, later on\n      'empty': /^$/,\n      'else': /^./,\n      'else2': /^./,\n      'space': /^\\s/,\n      'space A': /^\\s(?=[A-Z\\\\$])/,\n      'space$': /^\\s$/,\n      'a-z': /^[a-z]/,\n      'x': /^x/,\n      'x$': /^x$/,\n      'i$': /^i$/,\n      'letters': /^(?:[a-zA-Z\\u03B1-\\u03C9\\u0391-\\u03A9?@]|(?:\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\\s+|\\{\\}|(?![a-zA-Z]))))+/,\n      '\\\\greek': /^\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)(?:\\s+|\\{\\}|(?![a-zA-Z]))/,\n      'one lowercase latin letter $': /^(?:([a-z])(?:$|[^a-zA-Z]))$/,\n      '$one lowercase latin letter$ $': /^\\$(?:([a-z])(?:$|[^a-zA-Z]))\\$$/,\n      'one lowercase greek letter $': /^(?:\\$?[\\u03B1-\\u03C9]\\$?|\\$?\\\\(?:alpha|beta|gamma|delta|epsilon|zeta|eta|theta|iota|kappa|lambda|mu|nu|xi|omicron|pi|rho|sigma|tau|upsilon|phi|chi|psi|omega)\\s*\\$?)(?:\\s+|\\{\\}|(?![a-zA-Z]))$/,\n      'digits': /^[0-9]+/,\n      '-9.,9': /^[+\\-]?(?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))/,\n      '-9.,9 no missing 0': /^[+\\-]?[0-9]+(?:[.,][0-9]+)?/,\n      '(-)(9.,9)(e)(99)': function (input) {\n        var m = input.match(/^(\\+\\-|\\+\\/\\-|\\+|\\-|\\\\pm\\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))?(\\((?:[0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+))\\))?(?:([eE]|\\s*(\\*|x|\\\\times|\\u00D7)\\s*10\\^)([+\\-]?[0-9]+|\\{[+\\-]?[0-9]+\\}))?/);\n\n        if (m && m[0]) {\n          return {\n            match_: m.splice(1),\n            remainder: input.substr(m[0].length)\n          };\n        }\n\n        return null;\n      },\n      '(-)(9)^(-9)': function (input) {\n        var m = input.match(/^(\\+\\-|\\+\\/\\-|\\+|\\-|\\\\pm\\s?)?([0-9]+(?:[,.][0-9]+)?|[0-9]*(?:\\.[0-9]+)?)\\^([+\\-]?[0-9]+|\\{[+\\-]?[0-9]+\\})/);\n\n        if (m && m[0]) {\n          return {\n            match_: m.splice(1),\n            remainder: input.substr(m[0].length)\n          };\n        }\n\n        return null;\n      },\n      'state of aggregation $': function (input) {\n        // ... or crystal system\n        var a = mhchemParser.patterns.findObserveGroups(input, \"\", /^\\([a-z]{1,3}(?=[\\),])/, \")\", \"\"); // (aq), (aq,$\\infty$), (aq, sat)\n\n        if (a && a.remainder.match(/^($|[\\s,;\\)\\]\\}])/)) {\n          return a;\n        } //  AND end of 'phrase'\n\n\n        var m = input.match(/^(?:\\((?:\\\\ca\\s?)?\\$[amothc]\\$\\))/); // OR crystal system ($o$) (\\ca$c$)\n\n        if (m) {\n          return {\n            match_: m[0],\n            remainder: input.substr(m[0].length)\n          };\n        }\n\n        return null;\n      },\n      '_{(state of aggregation)}$': /^_\\{(\\([a-z]{1,3}\\))\\}/,\n      '{[(': /^(?:\\\\\\{|\\[|\\()/,\n      ')]}': /^(?:\\)|\\]|\\\\\\})/,\n      ', ': /^[,;]\\s*/,\n      ',': /^[,;]/,\n      '.': /^[.]/,\n      '. ': /^([.\\u22C5\\u00B7\\u2022])\\s*/,\n      '...': /^\\.\\.\\.(?=$|[^.])/,\n      '* ': /^([*])\\s*/,\n      '^{(...)}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"^{\", \"\", \"\", \"}\");\n      },\n      '^($...$)': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"^\", \"$\", \"$\", \"\");\n      },\n      '^a': /^\\^([0-9]+|[^\\\\_])/,\n      '^\\\\x{}{}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"^\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true);\n      },\n      '^\\\\x{}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"^\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\");\n      },\n      '^\\\\x': /^\\^(\\\\[a-zA-Z]+)\\s*/,\n      '^(-1)': /^\\^(-?\\d+)/,\n      '\\'': /^'/,\n      '_{(...)}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"_{\", \"\", \"\", \"}\");\n      },\n      '_($...$)': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"_\", \"$\", \"$\", \"\");\n      },\n      '_9': /^_([+\\-]?[0-9]+|[^\\\\])/,\n      '_\\\\x{}{}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"_\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true);\n      },\n      '_\\\\x{}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"_\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\");\n      },\n      '_\\\\x': /^_(\\\\[a-zA-Z]+)\\s*/,\n      '^_': /^(?:\\^(?=_)|\\_(?=\\^)|[\\^_]$)/,\n      '{}': /^\\{\\}/,\n      '{...}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\", \"{\", \"}\", \"\");\n      },\n      '{(...)}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"{\", \"\", \"\", \"}\");\n      },\n      '$...$': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\", \"$\", \"$\", \"\");\n      },\n      '${(...)}$': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"${\", \"\", \"\", \"}$\");\n      },\n      '$(...)$': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"$\", \"\", \"\", \"$\");\n      },\n      '=<>': /^[=<>]/,\n      '#': /^[#\\u2261]/,\n      '+': /^\\+/,\n      '-$': /^-(?=[\\s_},;\\]/]|$|\\([a-z]+\\))/,\n      // -space -, -; -] -/ -$ -state-of-aggregation\n      '-9': /^-(?=[0-9])/,\n      '- orbital overlap': /^-(?=(?:[spd]|sp)(?:$|[\\s,;\\)\\]\\}]))/,\n      '-': /^-/,\n      'pm-operator': /^(?:\\\\pm|\\$\\\\pm\\$|\\+-|\\+\\/-)/,\n      'operator': /^(?:\\+|(?:[\\-=<>]|<<|>>|\\\\approx|\\$\\\\approx\\$)(?=\\s|$|-?[0-9]))/,\n      'arrowUpDown': /^(?:v|\\(v\\)|\\^|\\(\\^\\))(?=$|[\\s,;\\)\\]\\}])/,\n      '\\\\bond{(...)}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\bond{\", \"\", \"\", \"}\");\n      },\n      '->': /^(?:<->|<--\x3e|->|<-|<=>>|<<=>|<=>|[\\u2192\\u27F6\\u21CC])/,\n      'CMT': /^[CMT](?=\\[)/,\n      '[(...)]': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"[\", \"\", \"\", \"]\");\n      },\n      '1st-level escape': /^(&|\\\\\\\\|\\\\hline)\\s*/,\n      '\\\\,': /^(?:\\\\[,\\ ;:])/,\n      // \\\\x - but output no space before\n      '\\\\x{}{}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\", \"\", \"{\", \"}\", \"\", true);\n      },\n      '\\\\x{}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\", /^\\\\[a-zA-Z]+\\{/, \"}\", \"\");\n      },\n      '\\\\ca': /^\\\\ca(?:\\s+|(?![a-zA-Z]))/,\n      '\\\\x': /^(?:\\\\[a-zA-Z]+\\s*|\\\\[_&{}%])/,\n      'orbital': /^(?:[0-9]{1,2}[spdfgh]|[0-9]{0,2}sp)(?=$|[^a-zA-Z])/,\n      // only those with numbers in front, because the others will be formatted correctly anyway\n      'others': /^[\\/~|]/,\n      '\\\\frac{(...)}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\frac{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\overset{(...)}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\overset{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\underset{(...)}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\underset{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\underbrace{(...)}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\underbrace{\", \"\", \"\", \"}_\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\color{(...)}0': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\color{\", \"\", \"\", \"}\");\n      },\n      '\\\\color{(...)}{(...)}1': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\color{\", \"\", \"\", \"}\", \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\color(...){(...)}2': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\color\", \"\\\\\", \"\", /^(?=\\{)/, \"{\", \"\", \"\", \"}\");\n      },\n      '\\\\ce{(...)}': function (input) {\n        return mhchemParser.patterns.findObserveGroups(input, \"\\\\ce{\", \"\", \"\", \"}\");\n      },\n      'oxidation$': /^(?:[+-][IVX]+|\\\\pm\\s*0|\\$\\\\pm\\$\\s*0)$/,\n      'd-oxidation$': /^(?:[+-]?\\s?[IVX]+|\\\\pm\\s*0|\\$\\\\pm\\$\\s*0)$/,\n      // 0 could be oxidation or charge\n      'roman numeral': /^[IVX]+/,\n      '1/2$': /^[+\\-]?(?:[0-9]+|\\$[a-z]\\$|[a-z])\\/[0-9]+(?:\\$[a-z]\\$|[a-z])?$/,\n      'amount': function (input) {\n        var match; // e.g. 2, 0.5, 1/2, -2, n/2, +;  $a$ could be added later in parsing\n\n        match = input.match(/^(?:(?:(?:\\([+\\-]?[0-9]+\\/[0-9]+\\)|[+\\-]?(?:[0-9]+|\\$[a-z]\\$|[a-z])\\/[0-9]+|[+\\-]?[0-9]+[.,][0-9]+|[+\\-]?\\.[0-9]+|[+\\-]?[0-9]+)(?:[a-z](?=\\s*[A-Z]))?)|[+\\-]?[a-z](?=\\s*[A-Z])|\\+(?!\\s))/);\n\n        if (match) {\n          return {\n            match_: match[0],\n            remainder: input.substr(match[0].length)\n          };\n        }\n\n        var a = mhchemParser.patterns.findObserveGroups(input, \"\", \"$\", \"$\", \"\");\n\n        if (a) {\n          // e.g. $2n-1$, $-$\n          match = a.match_.match(/^\\$(?:\\(?[+\\-]?(?:[0-9]*[a-z]?[+\\-])?[0-9]*[a-z](?:[+\\-][0-9]*[a-z]?)?\\)?|\\+|-)\\$$/);\n\n          if (match) {\n            return {\n              match_: match[0],\n              remainder: input.substr(match[0].length)\n            };\n          }\n        }\n\n        return null;\n      },\n      'amount2': function (input) {\n        return this['amount'](input);\n      },\n      '(KV letters),': /^(?:[A-Z][a-z]{0,2}|i)(?=,)/,\n      'formula$': function (input) {\n        if (input.match(/^\\([a-z]+\\)$/)) {\n          return null;\n        } // state of aggregation = no formula\n\n\n        var match = input.match(/^(?:[a-z]|(?:[0-9\\ \\+\\-\\,\\.\\(\\)]+[a-z])+[0-9\\ \\+\\-\\,\\.\\(\\)]*|(?:[a-z][0-9\\ \\+\\-\\,\\.\\(\\)]+)+[a-z]?)$/);\n\n        if (match) {\n          return {\n            match_: match[0],\n            remainder: input.substr(match[0].length)\n          };\n        }\n\n        return null;\n      },\n      'uprightEntities': /^(?:pH|pOH|pC|pK|iPr|iBu)(?=$|[^a-zA-Z])/,\n      '/': /^\\s*(\\/)\\s*/,\n      '//': /^\\s*(\\/\\/)\\s*/,\n      '*': /^\\s*[*.]\\s*/\n    },\n    findObserveGroups: function (input, begExcl, begIncl, endIncl, endExcl, beg2Excl, beg2Incl, end2Incl, end2Excl, combine) {\n      /** @type {{(input: string, pattern: string | RegExp): string | string[] | null;}} */\n      var _match = function (input, pattern) {\n        if (typeof pattern === \"string\") {\n          if (input.indexOf(pattern) !== 0) {\n            return null;\n          }\n\n          return pattern;\n        } else {\n          var match = input.match(pattern);\n\n          if (!match) {\n            return null;\n          }\n\n          return match[0];\n        }\n      };\n      /** @type {{(input: string, i: number, endChars: string | RegExp): {endMatchBegin: number, endMatchEnd: number} | null;}} */\n\n\n      var _findObserveGroups = function (input, i, endChars) {\n        var braces = 0;\n\n        while (i < input.length) {\n          var a = input.charAt(i);\n\n          var match = _match(input.substr(i), endChars);\n\n          if (match !== null && braces === 0) {\n            return {\n              endMatchBegin: i,\n              endMatchEnd: i + match.length\n            };\n          } else if (a === \"{\") {\n            braces++;\n          } else if (a === \"}\") {\n            if (braces === 0) {\n              throw [\"ExtraCloseMissingOpen\", \"Extra close brace or missing open brace\"];\n            } else {\n              braces--;\n            }\n          }\n\n          i++;\n        }\n\n        if (braces > 0) {\n          return null;\n        }\n\n        return null;\n      };\n\n      var match = _match(input, begExcl);\n\n      if (match === null) {\n        return null;\n      }\n\n      input = input.substr(match.length);\n      match = _match(input, begIncl);\n\n      if (match === null) {\n        return null;\n      }\n\n      var e = _findObserveGroups(input, match.length, endIncl || endExcl);\n\n      if (e === null) {\n        return null;\n      }\n\n      var match1 = input.substring(0, endIncl ? e.endMatchEnd : e.endMatchBegin);\n\n      if (!(beg2Excl || beg2Incl)) {\n        return {\n          match_: match1,\n          remainder: input.substr(e.endMatchEnd)\n        };\n      } else {\n        var group2 = this.findObserveGroups(input.substr(e.endMatchEnd), beg2Excl, beg2Incl, end2Incl, end2Excl);\n\n        if (group2 === null) {\n          return null;\n        }\n        /** @type {string[]} */\n\n\n        var matchRet = [match1, group2.match_];\n        return {\n          match_: combine ? matchRet.join(\"\") : matchRet,\n          remainder: group2.remainder\n        };\n      }\n    },\n    //\n    // Matching function\n    // e.g. match(\"a\", input) will look for the regexp called \"a\" and see if it matches\n    // returns null or {match_:\"a\", remainder:\"bc\"}\n    //\n    match_: function (m, input) {\n      var pattern = mhchemParser.patterns.patterns[m];\n\n      if (pattern === undefined) {\n        throw [\"MhchemBugP\", \"mhchem bug P. Please report. (\" + m + \")\"]; // Trying to use non-existing pattern\n      } else if (typeof pattern === \"function\") {\n        return mhchemParser.patterns.patterns[m](input); // cannot use cached var pattern here, because some pattern functions need this===mhchemParser\n      } else {\n        // RegExp\n        var match = input.match(pattern);\n\n        if (match) {\n          var mm;\n\n          if (match[2]) {\n            mm = [match[1], match[2]];\n          } else if (match[1]) {\n            mm = match[1];\n          } else {\n            mm = match[0];\n          }\n\n          return {\n            match_: mm,\n            remainder: input.substr(match[0].length)\n          };\n        }\n\n        return null;\n      }\n    }\n  },\n  //\n  // Generic state machine actions\n  //\n  actions: {\n    'a=': function (buffer, m) {\n      buffer.a = (buffer.a || \"\") + m;\n    },\n    'b=': function (buffer, m) {\n      buffer.b = (buffer.b || \"\") + m;\n    },\n    'p=': function (buffer, m) {\n      buffer.p = (buffer.p || \"\") + m;\n    },\n    'o=': function (buffer, m) {\n      buffer.o = (buffer.o || \"\") + m;\n    },\n    'q=': function (buffer, m) {\n      buffer.q = (buffer.q || \"\") + m;\n    },\n    'd=': function (buffer, m) {\n      buffer.d = (buffer.d || \"\") + m;\n    },\n    'rm=': function (buffer, m) {\n      buffer.rm = (buffer.rm || \"\") + m;\n    },\n    'text=': function (buffer, m) {\n      buffer.text_ = (buffer.text_ || \"\") + m;\n    },\n    'insert': function (buffer, m, a) {\n      return {\n        type_: a\n      };\n    },\n    'insert+p1': function (buffer, m, a) {\n      return {\n        type_: a,\n        p1: m\n      };\n    },\n    'insert+p1+p2': function (buffer, m, a) {\n      return {\n        type_: a,\n        p1: m[0],\n        p2: m[1]\n      };\n    },\n    'copy': function (buffer, m) {\n      return m;\n    },\n    'rm': function (buffer, m) {\n      return {\n        type_: 'rm',\n        p1: m || \"\"\n      };\n    },\n    'text': function (buffer, m) {\n      return mhchemParser.go(m, 'text');\n    },\n    '{text}': function (buffer, m) {\n      var ret = [\"{\"];\n      mhchemParser.concatArray(ret, mhchemParser.go(m, 'text'));\n      ret.push(\"}\");\n      return ret;\n    },\n    'tex-math': function (buffer, m) {\n      return mhchemParser.go(m, 'tex-math');\n    },\n    'tex-math tight': function (buffer, m) {\n      return mhchemParser.go(m, 'tex-math tight');\n    },\n    'bond': function (buffer, m, k) {\n      return {\n        type_: 'bond',\n        kind_: k || m\n      };\n    },\n    'color0-output': function (buffer, m) {\n      return {\n        type_: 'color0',\n        color: m[0]\n      };\n    },\n    'ce': function (buffer, m) {\n      return mhchemParser.go(m);\n    },\n    '1/2': function (buffer, m) {\n      /** @type {ParserOutput[]} */\n      var ret = [];\n\n      if (m.match(/^[+\\-]/)) {\n        ret.push(m.substr(0, 1));\n        m = m.substr(1);\n      }\n\n      var n = m.match(/^([0-9]+|\\$[a-z]\\$|[a-z])\\/([0-9]+)(\\$[a-z]\\$|[a-z])?$/);\n      n[1] = n[1].replace(/\\$/g, \"\");\n      ret.push({\n        type_: 'frac',\n        p1: n[1],\n        p2: n[2]\n      });\n\n      if (n[3]) {\n        n[3] = n[3].replace(/\\$/g, \"\");\n        ret.push({\n          type_: 'tex-math',\n          p1: n[3]\n        });\n      }\n\n      return ret;\n    },\n    '9,9': function (buffer, m) {\n      return mhchemParser.go(m, '9,9');\n    }\n  },\n  //\n  // createTransitions\n  // convert  { 'letter': { 'state': { action_: 'output' } } }  to  { 'state' => [ { pattern: 'letter', task: { action_: [{type_: 'output'}] } } ] }\n  // with expansion of 'a|b' to 'a' and 'b' (at 2 places)\n  //\n  createTransitions: function (o) {\n    var pattern, state;\n    /** @type {string[]} */\n\n    var stateArray;\n    var i; //\n    // 1. Collect all states\n    //\n\n    /** @type {Transitions} */\n\n    var transitions = {};\n\n    for (pattern in o) {\n      for (state in o[pattern]) {\n        stateArray = state.split(\"|\");\n        o[pattern][state].stateArray = stateArray;\n\n        for (i = 0; i < stateArray.length; i++) {\n          transitions[stateArray[i]] = [];\n        }\n      }\n    } //\n    // 2. Fill states\n    //\n\n\n    for (pattern in o) {\n      for (state in o[pattern]) {\n        stateArray = o[pattern][state].stateArray || [];\n\n        for (i = 0; i < stateArray.length; i++) {\n          //\n          // 2a. Normalize actions into array:  'text=' ==> [{type_:'text='}]\n          // (Note to myself: Resolving the function here would be problematic. It would need .bind (for *this*) and currying (for *option*).)\n          //\n\n          /** @type {any} */\n          var p = o[pattern][state];\n\n          if (p.action_) {\n            p.action_ = [].concat(p.action_);\n\n            for (var k = 0; k < p.action_.length; k++) {\n              if (typeof p.action_[k] === \"string\") {\n                p.action_[k] = {\n                  type_: p.action_[k]\n                };\n              }\n            }\n          } else {\n            p.action_ = [];\n          } //\n          // 2.b Multi-insert\n          //\n\n\n          var patternArray = pattern.split(\"|\");\n\n          for (var j = 0; j < patternArray.length; j++) {\n            if (stateArray[i] === '*') {\n              // insert into all\n              for (var t in transitions) {\n                transitions[t].push({\n                  pattern: patternArray[j],\n                  task: p\n                });\n              }\n            } else {\n              transitions[stateArray[i]].push({\n                pattern: patternArray[j],\n                task: p\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return transitions;\n  },\n  stateMachines: {}\n}; //\n// Definition of state machines\n//\n\nmhchemParser.stateMachines = {\n  //\n  // \\ce state machines\n  //\n  //#region ce\n  'ce': {\n    // main parser\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      'else': {\n        '0|1|2': {\n          action_: 'beginsWithBond=false',\n          revisit: true,\n          toContinue: true\n        }\n      },\n      'oxidation$': {\n        '0': {\n          action_: 'oxidation-output'\n        }\n      },\n      'CMT': {\n        'r': {\n          action_: 'rdt=',\n          nextState: 'rt'\n        },\n        'rd': {\n          action_: 'rqt=',\n          nextState: 'rdt'\n        }\n      },\n      'arrowUpDown': {\n        '0|1|2|as': {\n          action_: ['sb=false', 'output', 'operator'],\n          nextState: '1'\n        }\n      },\n      'uprightEntities': {\n        '0|1|2': {\n          action_: ['o=', 'output'],\n          nextState: '1'\n        }\n      },\n      'orbital': {\n        '0|1|2|3': {\n          action_: 'o=',\n          nextState: 'o'\n        }\n      },\n      '->': {\n        '0|1|2|3': {\n          action_: 'r=',\n          nextState: 'r'\n        },\n        'a|as': {\n          action_: ['output', 'r='],\n          nextState: 'r'\n        },\n        '*': {\n          action_: ['output', 'r='],\n          nextState: 'r'\n        }\n      },\n      '+': {\n        'o': {\n          action_: 'd= kv',\n          nextState: 'd'\n        },\n        'd|D': {\n          action_: 'd=',\n          nextState: 'd'\n        },\n        'q': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'qd|qD': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'dq': {\n          action_: ['output', 'd='],\n          nextState: 'd'\n        },\n        '3': {\n          action_: ['sb=false', 'output', 'operator'],\n          nextState: '0'\n        }\n      },\n      'amount': {\n        '0|2': {\n          action_: 'a=',\n          nextState: 'a'\n        }\n      },\n      'pm-operator': {\n        '0|1|2|a|as': {\n          action_: ['sb=false', 'output', {\n            type_: 'operator',\n            option: '\\\\pm'\n          }],\n          nextState: '0'\n        }\n      },\n      'operator': {\n        '0|1|2|a|as': {\n          action_: ['sb=false', 'output', 'operator'],\n          nextState: '0'\n        }\n      },\n      '-$': {\n        'o|q': {\n          action_: ['charge or bond', 'output'],\n          nextState: 'qd'\n        },\n        'd': {\n          action_: 'd=',\n          nextState: 'd'\n        },\n        'D': {\n          action_: ['output', {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        },\n        'q': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'qd': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'qD|dq': {\n          action_: ['output', {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        }\n      },\n      '-9': {\n        '3|o': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'hyphen'\n          }],\n          nextState: '3'\n        }\n      },\n      '- orbital overlap': {\n        'o': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'hyphen'\n          }],\n          nextState: '2'\n        },\n        'd': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'hyphen'\n          }],\n          nextState: '2'\n        }\n      },\n      '-': {\n        '0|1|2': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, 'beginsWithBond=true', {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        },\n        '3': {\n          action_: {\n            type_: 'bond',\n            option: \"-\"\n          }\n        },\n        'a': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'hyphen'\n          }],\n          nextState: '2'\n        },\n        'as': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        },\n        'b': {\n          action_: 'b='\n        },\n        'o': {\n          action_: {\n            type_: '- after o/d',\n            option: false\n          },\n          nextState: '2'\n        },\n        'q': {\n          action_: {\n            type_: '- after o/d',\n            option: false\n          },\n          nextState: '2'\n        },\n        'd|qd|dq': {\n          action_: {\n            type_: '- after o/d',\n            option: true\n          },\n          nextState: '2'\n        },\n        'D|qD|p': {\n          action_: ['output', {\n            type_: 'bond',\n            option: \"-\"\n          }],\n          nextState: '3'\n        }\n      },\n      'amount2': {\n        '1|3': {\n          action_: 'a=',\n          nextState: 'a'\n        }\n      },\n      'letters': {\n        '0|1|2|3|a|as|b|p|bp|o': {\n          action_: 'o=',\n          nextState: 'o'\n        },\n        'q|dq': {\n          action_: ['output', 'o='],\n          nextState: 'o'\n        },\n        'd|D|qd|qD': {\n          action_: 'o after d',\n          nextState: 'o'\n        }\n      },\n      'digits': {\n        'o': {\n          action_: 'q=',\n          nextState: 'q'\n        },\n        'd|D': {\n          action_: 'q=',\n          nextState: 'dq'\n        },\n        'q': {\n          action_: ['output', 'o='],\n          nextState: 'o'\n        },\n        'a': {\n          action_: 'o=',\n          nextState: 'o'\n        }\n      },\n      'space A': {\n        'b|p|bp': {}\n      },\n      'space': {\n        'a': {\n          nextState: 'as'\n        },\n        '0': {\n          action_: 'sb=false'\n        },\n        '1|2': {\n          action_: 'sb=true'\n        },\n        'r|rt|rd|rdt|rdq': {\n          action_: 'output',\n          nextState: '0'\n        },\n        '*': {\n          action_: ['output', 'sb=true'],\n          nextState: '1'\n        }\n      },\n      '1st-level escape': {\n        '1|2': {\n          action_: ['output', {\n            type_: 'insert+p1',\n            option: '1st-level escape'\n          }]\n        },\n        '*': {\n          action_: ['output', {\n            type_: 'insert+p1',\n            option: '1st-level escape'\n          }],\n          nextState: '0'\n        }\n      },\n      '[(...)]': {\n        'r|rt': {\n          action_: 'rd=',\n          nextState: 'rd'\n        },\n        'rd|rdt': {\n          action_: 'rq=',\n          nextState: 'rdq'\n        }\n      },\n      '...': {\n        'o|d|D|dq|qd|qD': {\n          action_: ['output', {\n            type_: 'bond',\n            option: \"...\"\n          }],\n          nextState: '3'\n        },\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, {\n            type_: 'insert',\n            option: 'ellipsis'\n          }],\n          nextState: '1'\n        }\n      },\n      '. |* ': {\n        '*': {\n          action_: ['output', {\n            type_: 'insert',\n            option: 'addition compound'\n          }],\n          nextState: '1'\n        }\n      },\n      'state of aggregation $': {\n        '*': {\n          action_: ['output', 'state of aggregation'],\n          nextState: '1'\n        }\n      },\n      '{[(': {\n        'a|as|o': {\n          action_: ['o=', 'output', 'parenthesisLevel++'],\n          nextState: '2'\n        },\n        '0|1|2|3': {\n          action_: ['o=', 'output', 'parenthesisLevel++'],\n          nextState: '2'\n        },\n        '*': {\n          action_: ['output', 'o=', 'output', 'parenthesisLevel++'],\n          nextState: '2'\n        }\n      },\n      ')]}': {\n        '0|1|2|3|b|p|bp|o': {\n          action_: ['o=', 'parenthesisLevel--'],\n          nextState: 'o'\n        },\n        'a|as|d|D|q|qd|qD|dq': {\n          action_: ['output', 'o=', 'parenthesisLevel--'],\n          nextState: 'o'\n        }\n      },\n      ', ': {\n        '*': {\n          action_: ['output', 'comma'],\n          nextState: '0'\n        }\n      },\n      '^_': {\n        // ^ and _ without a sensible argument\n        '*': {}\n      },\n      '^{(...)}|^($...$)': {\n        '0|1|2|as': {\n          action_: 'b=',\n          nextState: 'b'\n        },\n        'p': {\n          action_: 'b=',\n          nextState: 'bp'\n        },\n        '3|o': {\n          action_: 'd= kv',\n          nextState: 'D'\n        },\n        'q': {\n          action_: 'd=',\n          nextState: 'qD'\n        },\n        'd|D|qd|qD|dq': {\n          action_: ['output', 'd='],\n          nextState: 'D'\n        }\n      },\n      '^a|^\\\\x{}{}|^\\\\x{}|^\\\\x|\\'': {\n        '0|1|2|as': {\n          action_: 'b=',\n          nextState: 'b'\n        },\n        'p': {\n          action_: 'b=',\n          nextState: 'bp'\n        },\n        '3|o': {\n          action_: 'd= kv',\n          nextState: 'd'\n        },\n        'q': {\n          action_: 'd=',\n          nextState: 'qd'\n        },\n        'd|qd|D|qD': {\n          action_: 'd='\n        },\n        'dq': {\n          action_: ['output', 'd='],\n          nextState: 'd'\n        }\n      },\n      '_{(state of aggregation)}$': {\n        'd|D|q|qd|qD|dq': {\n          action_: ['output', 'q='],\n          nextState: 'q'\n        }\n      },\n      '_{(...)}|_($...$)|_9|_\\\\x{}{}|_\\\\x{}|_\\\\x': {\n        '0|1|2|as': {\n          action_: 'p=',\n          nextState: 'p'\n        },\n        'b': {\n          action_: 'p=',\n          nextState: 'bp'\n        },\n        '3|o': {\n          action_: 'q=',\n          nextState: 'q'\n        },\n        'd|D': {\n          action_: 'q=',\n          nextState: 'dq'\n        },\n        'q|qd|qD|dq': {\n          action_: ['output', 'q='],\n          nextState: 'q'\n        }\n      },\n      '=<>': {\n        '0|1|2|3|a|as|o|q|d|D|qd|qD|dq': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'bond'],\n          nextState: '3'\n        }\n      },\n      '#': {\n        '0|1|2|3|a|as|o': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, {\n            type_: 'bond',\n            option: \"#\"\n          }],\n          nextState: '3'\n        }\n      },\n      '{}': {\n        '*': {\n          action_: {\n            type_: 'output',\n            option: 1\n          },\n          nextState: '1'\n        }\n      },\n      '{...}': {\n        '0|1|2|3|a|as|b|p|bp': {\n          action_: 'o=',\n          nextState: 'o'\n        },\n        'o|d|D|q|qd|qD|dq': {\n          action_: ['output', 'o='],\n          nextState: 'o'\n        }\n      },\n      '$...$': {\n        'a': {\n          action_: 'a='\n        },\n        // 2$n$\n        '0|1|2|3|as|b|p|bp|o': {\n          action_: 'o=',\n          nextState: 'o'\n        },\n        // not 'amount'\n        'as|o': {\n          action_: 'o='\n        },\n        'q|d|D|qd|qD|dq': {\n          action_: ['output', 'o='],\n          nextState: 'o'\n        }\n      },\n      '\\\\bond{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'bond'],\n          nextState: \"3\"\n        }\n      },\n      '\\\\frac{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, 'frac-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\overset{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'overset-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\underset{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'underset-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\underbrace{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'underbrace-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\color{(...)}{(...)}1|\\\\color(...){(...)}2': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'color-output'],\n          nextState: '3'\n        }\n      },\n      '\\\\color{(...)}0': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'color0-output']\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 2\n          }, 'ce'],\n          nextState: '3'\n        }\n      },\n      '\\\\,': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, 'copy'],\n          nextState: '1'\n        }\n      },\n      '\\\\x{}{}|\\\\x{}|\\\\x': {\n        '0|1|2|3|a|as|b|p|bp|o|c0': {\n          action_: ['o=', 'output'],\n          nextState: '3'\n        },\n        '*': {\n          action_: ['output', 'o=', 'output'],\n          nextState: '3'\n        }\n      },\n      'others': {\n        '*': {\n          action_: [{\n            type_: 'output',\n            option: 1\n          }, 'copy'],\n          nextState: '3'\n        }\n      },\n      'else2': {\n        'a': {\n          action_: 'a to o',\n          nextState: 'o',\n          revisit: true\n        },\n        'as': {\n          action_: ['output', 'sb=true'],\n          nextState: '1',\n          revisit: true\n        },\n        'r|rt|rd|rdt|rdq': {\n          action_: ['output'],\n          nextState: '0',\n          revisit: true\n        },\n        '*': {\n          action_: ['output', 'copy'],\n          nextState: '3'\n        }\n      }\n    }),\n    actions: {\n      'o after d': function (buffer, m) {\n        var ret;\n\n        if ((buffer.d || \"\").match(/^[0-9]+$/)) {\n          var tmp = buffer.d;\n          buffer.d = undefined;\n          ret = this['output'](buffer);\n          buffer.b = tmp;\n        } else {\n          ret = this['output'](buffer);\n        }\n\n        mhchemParser.actions['o='](buffer, m);\n        return ret;\n      },\n      'd= kv': function (buffer, m) {\n        buffer.d = m;\n        buffer.dType = 'kv';\n      },\n      'charge or bond': function (buffer, m) {\n        if (buffer['beginsWithBond']) {\n          /** @type {ParserOutput[]} */\n          var ret = [];\n          mhchemParser.concatArray(ret, this['output'](buffer));\n          mhchemParser.concatArray(ret, mhchemParser.actions['bond'](buffer, m, \"-\"));\n          return ret;\n        } else {\n          buffer.d = m;\n        }\n      },\n      '- after o/d': function (buffer, m, isAfterD) {\n        var c1 = mhchemParser.patterns.match_('orbital', buffer.o || \"\");\n        var c2 = mhchemParser.patterns.match_('one lowercase greek letter $', buffer.o || \"\");\n        var c3 = mhchemParser.patterns.match_('one lowercase latin letter $', buffer.o || \"\");\n        var c4 = mhchemParser.patterns.match_('$one lowercase latin letter$ $', buffer.o || \"\");\n        var hyphenFollows = m === \"-\" && (c1 && c1.remainder === \"\" || c2 || c3 || c4);\n\n        if (hyphenFollows && !buffer.a && !buffer.b && !buffer.p && !buffer.d && !buffer.q && !c1 && c3) {\n          buffer.o = '$' + buffer.o + '$';\n        }\n        /** @type {ParserOutput[]} */\n\n\n        var ret = [];\n\n        if (hyphenFollows) {\n          mhchemParser.concatArray(ret, this['output'](buffer));\n          ret.push({\n            type_: 'hyphen'\n          });\n        } else {\n          c1 = mhchemParser.patterns.match_('digits', buffer.d || \"\");\n\n          if (isAfterD && c1 && c1.remainder === '') {\n            mhchemParser.concatArray(ret, mhchemParser.actions['d='](buffer, m));\n            mhchemParser.concatArray(ret, this['output'](buffer));\n          } else {\n            mhchemParser.concatArray(ret, this['output'](buffer));\n            mhchemParser.concatArray(ret, mhchemParser.actions['bond'](buffer, m, \"-\"));\n          }\n        }\n\n        return ret;\n      },\n      'a to o': function (buffer) {\n        buffer.o = buffer.a;\n        buffer.a = undefined;\n      },\n      'sb=true': function (buffer) {\n        buffer.sb = true;\n      },\n      'sb=false': function (buffer) {\n        buffer.sb = false;\n      },\n      'beginsWithBond=true': function (buffer) {\n        buffer['beginsWithBond'] = true;\n      },\n      'beginsWithBond=false': function (buffer) {\n        buffer['beginsWithBond'] = false;\n      },\n      'parenthesisLevel++': function (buffer) {\n        buffer['parenthesisLevel']++;\n      },\n      'parenthesisLevel--': function (buffer) {\n        buffer['parenthesisLevel']--;\n      },\n      'state of aggregation': function (buffer, m) {\n        return {\n          type_: 'state of aggregation',\n          p1: mhchemParser.go(m, 'o')\n        };\n      },\n      'comma': function (buffer, m) {\n        var a = m.replace(/\\s*$/, '');\n        var withSpace = a !== m;\n\n        if (withSpace && buffer['parenthesisLevel'] === 0) {\n          return {\n            type_: 'comma enumeration L',\n            p1: a\n          };\n        } else {\n          return {\n            type_: 'comma enumeration M',\n            p1: a\n          };\n        }\n      },\n      'output': function (buffer, m, entityFollows) {\n        // entityFollows:\n        //   undefined = if we have nothing else to output, also ignore the just read space (buffer.sb)\n        //   1 = an entity follows, never omit the space if there was one just read before (can only apply to state 1)\n        //   2 = 1 + the entity can have an amount, so output a\\, instead of converting it to o (can only apply to states a|as)\n\n        /** @type {ParserOutput | ParserOutput[]} */\n        var ret;\n\n        if (!buffer.r) {\n          ret = [];\n\n          if (!buffer.a && !buffer.b && !buffer.p && !buffer.o && !buffer.q && !buffer.d && !entityFollows) {//ret = [];\n          } else {\n            if (buffer.sb) {\n              ret.push({\n                type_: 'entitySkip'\n              });\n            }\n\n            if (!buffer.o && !buffer.q && !buffer.d && !buffer.b && !buffer.p && entityFollows !== 2) {\n              buffer.o = buffer.a;\n              buffer.a = undefined;\n            } else if (!buffer.o && !buffer.q && !buffer.d && (buffer.b || buffer.p)) {\n              buffer.o = buffer.a;\n              buffer.d = buffer.b;\n              buffer.q = buffer.p;\n              buffer.a = buffer.b = buffer.p = undefined;\n            } else {\n              if (buffer.o && buffer.dType === 'kv' && mhchemParser.patterns.match_('d-oxidation$', buffer.d || \"\")) {\n                buffer.dType = 'oxidation';\n              } else if (buffer.o && buffer.dType === 'kv' && !buffer.q) {\n                buffer.dType = undefined;\n              }\n            }\n\n            ret.push({\n              type_: 'chemfive',\n              a: mhchemParser.go(buffer.a, 'a'),\n              b: mhchemParser.go(buffer.b, 'bd'),\n              p: mhchemParser.go(buffer.p, 'pq'),\n              o: mhchemParser.go(buffer.o, 'o'),\n              q: mhchemParser.go(buffer.q, 'pq'),\n              d: mhchemParser.go(buffer.d, buffer.dType === 'oxidation' ? 'oxidation' : 'bd'),\n              dType: buffer.dType\n            });\n          }\n        } else {\n          // r\n\n          /** @type {ParserOutput[]} */\n          var rd;\n\n          if (buffer.rdt === 'M') {\n            rd = mhchemParser.go(buffer.rd, 'tex-math');\n          } else if (buffer.rdt === 'T') {\n            rd = [{\n              type_: 'text',\n              p1: buffer.rd || \"\"\n            }];\n          } else {\n            rd = mhchemParser.go(buffer.rd);\n          }\n          /** @type {ParserOutput[]} */\n\n\n          var rq;\n\n          if (buffer.rqt === 'M') {\n            rq = mhchemParser.go(buffer.rq, 'tex-math');\n          } else if (buffer.rqt === 'T') {\n            rq = [{\n              type_: 'text',\n              p1: buffer.rq || \"\"\n            }];\n          } else {\n            rq = mhchemParser.go(buffer.rq);\n          }\n\n          ret = {\n            type_: 'arrow',\n            r: buffer.r,\n            rd: rd,\n            rq: rq\n          };\n        }\n\n        for (var p in buffer) {\n          if (p !== 'parenthesisLevel' && p !== 'beginsWithBond') {\n            delete buffer[p];\n          }\n        }\n\n        return ret;\n      },\n      'oxidation-output': function (buffer, m) {\n        var ret = [\"{\"];\n        mhchemParser.concatArray(ret, mhchemParser.go(m, 'oxidation'));\n        ret.push(\"}\");\n        return ret;\n      },\n      'frac-output': function (buffer, m) {\n        return {\n          type_: 'frac-ce',\n          p1: mhchemParser.go(m[0]),\n          p2: mhchemParser.go(m[1])\n        };\n      },\n      'overset-output': function (buffer, m) {\n        return {\n          type_: 'overset',\n          p1: mhchemParser.go(m[0]),\n          p2: mhchemParser.go(m[1])\n        };\n      },\n      'underset-output': function (buffer, m) {\n        return {\n          type_: 'underset',\n          p1: mhchemParser.go(m[0]),\n          p2: mhchemParser.go(m[1])\n        };\n      },\n      'underbrace-output': function (buffer, m) {\n        return {\n          type_: 'underbrace',\n          p1: mhchemParser.go(m[0]),\n          p2: mhchemParser.go(m[1])\n        };\n      },\n      'color-output': function (buffer, m) {\n        return {\n          type_: 'color',\n          color1: m[0],\n          color2: mhchemParser.go(m[1])\n        };\n      },\n      'r=': function (buffer, m) {\n        buffer.r = m;\n      },\n      'rdt=': function (buffer, m) {\n        buffer.rdt = m;\n      },\n      'rd=': function (buffer, m) {\n        buffer.rd = m;\n      },\n      'rqt=': function (buffer, m) {\n        buffer.rqt = m;\n      },\n      'rq=': function (buffer, m) {\n        buffer.rq = m;\n      },\n      'operator': function (buffer, m, p1) {\n        return {\n          type_: 'operator',\n          kind_: p1 || m\n        };\n      }\n    }\n  },\n  'a': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      '1/2$': {\n        '0': {\n          action_: '1/2'\n        }\n      },\n      'else': {\n        '0': {\n          nextState: '1',\n          revisit: true\n        }\n      },\n      '$(...)$': {\n        '*': {\n          action_: 'tex-math tight',\n          nextState: '1'\n        }\n      },\n      ',': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'commaDecimal'\n          }\n        }\n      },\n      'else2': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {}\n  },\n  'o': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      '1/2$': {\n        '0': {\n          action_: '1/2'\n        }\n      },\n      'else': {\n        '0': {\n          nextState: '1',\n          revisit: true\n        }\n      },\n      'letters': {\n        '*': {\n          action_: 'rm'\n        }\n      },\n      '\\\\ca': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'circa'\n          }\n        }\n      },\n      '\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'copy'\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      '{(...)}': {\n        '*': {\n          action_: '{text}'\n        }\n      },\n      'else2': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {}\n  },\n  'text': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      '{...}': {\n        '*': {\n          action_: 'text='\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      '\\\\greek': {\n        '*': {\n          action_: ['output', 'rm']\n        }\n      },\n      '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: ['output', 'copy']\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'text='\n        }\n      }\n    }),\n    actions: {\n      'output': function (buffer) {\n        if (buffer.text_) {\n          /** @type {ParserOutput} */\n          var ret = {\n            type_: 'text',\n            p1: buffer.text_\n          };\n\n          for (var p in buffer) {\n            delete buffer[p];\n          }\n\n          return ret;\n        }\n      }\n    }\n  },\n  'pq': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      'state of aggregation $': {\n        '*': {\n          action_: 'state of aggregation'\n        }\n      },\n      'i$': {\n        '0': {\n          nextState: '!f',\n          revisit: true\n        }\n      },\n      '(KV letters),': {\n        '0': {\n          action_: 'rm',\n          nextState: '0'\n        }\n      },\n      'formula$': {\n        '0': {\n          nextState: 'f',\n          revisit: true\n        }\n      },\n      '1/2$': {\n        '0': {\n          action_: '1/2'\n        }\n      },\n      'else': {\n        '0': {\n          nextState: '!f',\n          revisit: true\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      '{(...)}': {\n        '*': {\n          action_: 'text'\n        }\n      },\n      'a-z': {\n        'f': {\n          action_: 'tex-math'\n        }\n      },\n      'letters': {\n        '*': {\n          action_: 'rm'\n        }\n      },\n      '-9.,9': {\n        '*': {\n          action_: '9,9'\n        }\n      },\n      ',': {\n        '*': {\n          action_: {\n            type_: 'insert+p1',\n            option: 'comma enumeration S'\n          }\n        }\n      },\n      '\\\\color{(...)}{(...)}1|\\\\color(...){(...)}2': {\n        '*': {\n          action_: 'color-output'\n        }\n      },\n      '\\\\color{(...)}0': {\n        '*': {\n          action_: 'color0-output'\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: 'ce'\n        }\n      },\n      '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'copy'\n        }\n      },\n      'else2': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {\n      'state of aggregation': function (buffer, m) {\n        return {\n          type_: 'state of aggregation subscript',\n          p1: mhchemParser.go(m, 'o')\n        };\n      },\n      'color-output': function (buffer, m) {\n        return {\n          type_: 'color',\n          color1: m[0],\n          color2: mhchemParser.go(m[1], 'pq')\n        };\n      }\n    }\n  },\n  'bd': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      'x$': {\n        '0': {\n          nextState: '!f',\n          revisit: true\n        }\n      },\n      'formula$': {\n        '0': {\n          nextState: 'f',\n          revisit: true\n        }\n      },\n      'else': {\n        '0': {\n          nextState: '!f',\n          revisit: true\n        }\n      },\n      '-9.,9 no missing 0': {\n        '*': {\n          action_: '9,9'\n        }\n      },\n      '.': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'electron dot'\n          }\n        }\n      },\n      'a-z': {\n        'f': {\n          action_: 'tex-math'\n        }\n      },\n      'x': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'KV x'\n          }\n        }\n      },\n      'letters': {\n        '*': {\n          action_: 'rm'\n        }\n      },\n      '\\'': {\n        '*': {\n          action_: {\n            type_: 'insert',\n            option: 'prime'\n          }\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      '{(...)}': {\n        '*': {\n          action_: 'text'\n        }\n      },\n      '\\\\color{(...)}{(...)}1|\\\\color(...){(...)}2': {\n        '*': {\n          action_: 'color-output'\n        }\n      },\n      '\\\\color{(...)}0': {\n        '*': {\n          action_: 'color0-output'\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: 'ce'\n        }\n      },\n      '\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'copy'\n        }\n      },\n      'else2': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {\n      'color-output': function (buffer, m) {\n        return {\n          type_: 'color',\n          color1: m[0],\n          color2: mhchemParser.go(m[1], 'bd')\n        };\n      }\n    }\n  },\n  'oxidation': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      'roman numeral': {\n        '*': {\n          action_: 'roman-numeral'\n        }\n      },\n      '${(...)}$|$(...)$': {\n        '*': {\n          action_: 'tex-math'\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {\n      'roman-numeral': function (buffer, m) {\n        return {\n          type_: 'roman numeral',\n          p1: m || \"\"\n        };\n      }\n    }\n  },\n  'tex-math': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: ['output', 'ce']\n        }\n      },\n      '{...}|\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'o='\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'o='\n        }\n      }\n    }),\n    actions: {\n      'output': function (buffer) {\n        if (buffer.o) {\n          /** @type {ParserOutput} */\n          var ret = {\n            type_: 'tex-math',\n            p1: buffer.o\n          };\n\n          for (var p in buffer) {\n            delete buffer[p];\n          }\n\n          return ret;\n        }\n      }\n    }\n  },\n  'tex-math tight': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      '\\\\ce{(...)}': {\n        '*': {\n          action_: ['output', 'ce']\n        }\n      },\n      '{...}|\\\\,|\\\\x{}{}|\\\\x{}|\\\\x': {\n        '*': {\n          action_: 'o='\n        }\n      },\n      '-|+': {\n        '*': {\n          action_: 'tight operator'\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'o='\n        }\n      }\n    }),\n    actions: {\n      'tight operator': function (buffer, m) {\n        buffer.o = (buffer.o || \"\") + \"{\" + m + \"}\";\n      },\n      'output': function (buffer) {\n        if (buffer.o) {\n          /** @type {ParserOutput} */\n          var ret = {\n            type_: 'tex-math',\n            p1: buffer.o\n          };\n\n          for (var p in buffer) {\n            delete buffer[p];\n          }\n\n          return ret;\n        }\n      }\n    }\n  },\n  '9,9': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {}\n      },\n      ',': {\n        '*': {\n          action_: 'comma'\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'copy'\n        }\n      }\n    }),\n    actions: {\n      'comma': function () {\n        return {\n          type_: 'commaDecimal'\n        };\n      }\n    }\n  },\n  //#endregion\n  //\n  // \\pu state machines\n  //\n  //#region pu\n  'pu': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      'space$': {\n        '*': {\n          action_: ['output', 'space']\n        }\n      },\n      '{[(|)]}': {\n        '0|a': {\n          action_: 'copy'\n        }\n      },\n      '(-)(9)^(-9)': {\n        '0': {\n          action_: 'number^',\n          nextState: 'a'\n        }\n      },\n      '(-)(9.,9)(e)(99)': {\n        '0': {\n          action_: 'enumber',\n          nextState: 'a'\n        }\n      },\n      'space': {\n        '0|a': {}\n      },\n      'pm-operator': {\n        '0|a': {\n          action_: {\n            type_: 'operator',\n            option: '\\\\pm'\n          },\n          nextState: '0'\n        }\n      },\n      'operator': {\n        '0|a': {\n          action_: 'copy',\n          nextState: '0'\n        }\n      },\n      '//': {\n        'd': {\n          action_: 'o=',\n          nextState: '/'\n        }\n      },\n      '/': {\n        'd': {\n          action_: 'o=',\n          nextState: '/'\n        }\n      },\n      '{...}|else': {\n        '0|d': {\n          action_: 'd=',\n          nextState: 'd'\n        },\n        'a': {\n          action_: ['space', 'd='],\n          nextState: 'd'\n        },\n        '/|q': {\n          action_: 'q=',\n          nextState: 'q'\n        }\n      }\n    }),\n    actions: {\n      'enumber': function (buffer, m) {\n        /** @type {ParserOutput[]} */\n        var ret = [];\n\n        if (m[0] === \"+-\" || m[0] === \"+/-\") {\n          ret.push(\"\\\\pm \");\n        } else if (m[0]) {\n          ret.push(m[0]);\n        }\n\n        if (m[1]) {\n          mhchemParser.concatArray(ret, mhchemParser.go(m[1], 'pu-9,9'));\n\n          if (m[2]) {\n            if (m[2].match(/[,.]/)) {\n              mhchemParser.concatArray(ret, mhchemParser.go(m[2], 'pu-9,9'));\n            } else {\n              ret.push(m[2]);\n            }\n          }\n\n          m[3] = m[4] || m[3];\n\n          if (m[3]) {\n            m[3] = m[3].trim();\n\n            if (m[3] === \"e\" || m[3].substr(0, 1) === \"*\") {\n              ret.push({\n                type_: 'cdot'\n              });\n            } else {\n              ret.push({\n                type_: 'times'\n              });\n            }\n          }\n        }\n\n        if (m[3]) {\n          ret.push(\"10^{\" + m[5] + \"}\");\n        }\n\n        return ret;\n      },\n      'number^': function (buffer, m) {\n        /** @type {ParserOutput[]} */\n        var ret = [];\n\n        if (m[0] === \"+-\" || m[0] === \"+/-\") {\n          ret.push(\"\\\\pm \");\n        } else if (m[0]) {\n          ret.push(m[0]);\n        }\n\n        mhchemParser.concatArray(ret, mhchemParser.go(m[1], 'pu-9,9'));\n        ret.push(\"^{\" + m[2] + \"}\");\n        return ret;\n      },\n      'operator': function (buffer, m, p1) {\n        return {\n          type_: 'operator',\n          kind_: p1 || m\n        };\n      },\n      'space': function () {\n        return {\n          type_: 'pu-space-1'\n        };\n      },\n      'output': function (buffer) {\n        /** @type {ParserOutput | ParserOutput[]} */\n        var ret;\n        var md = mhchemParser.patterns.match_('{(...)}', buffer.d || \"\");\n\n        if (md && md.remainder === '') {\n          buffer.d = md.match_;\n        }\n\n        var mq = mhchemParser.patterns.match_('{(...)}', buffer.q || \"\");\n\n        if (mq && mq.remainder === '') {\n          buffer.q = mq.match_;\n        }\n\n        if (buffer.d) {\n          buffer.d = buffer.d.replace(/\\u00B0C|\\^oC|\\^{o}C/g, \"{}^{\\\\circ}C\");\n          buffer.d = buffer.d.replace(/\\u00B0F|\\^oF|\\^{o}F/g, \"{}^{\\\\circ}F\");\n        }\n\n        if (buffer.q) {\n          // fraction\n          buffer.q = buffer.q.replace(/\\u00B0C|\\^oC|\\^{o}C/g, \"{}^{\\\\circ}C\");\n          buffer.q = buffer.q.replace(/\\u00B0F|\\^oF|\\^{o}F/g, \"{}^{\\\\circ}F\");\n          var b5 = {\n            d: mhchemParser.go(buffer.d, 'pu'),\n            q: mhchemParser.go(buffer.q, 'pu')\n          };\n\n          if (buffer.o === '//') {\n            ret = {\n              type_: 'pu-frac',\n              p1: b5.d,\n              p2: b5.q\n            };\n          } else {\n            ret = b5.d;\n\n            if (b5.d.length > 1 || b5.q.length > 1) {\n              ret.push({\n                type_: ' / '\n              });\n            } else {\n              ret.push({\n                type_: '/'\n              });\n            }\n\n            mhchemParser.concatArray(ret, b5.q);\n          }\n        } else {\n          // no fraction\n          ret = mhchemParser.go(buffer.d, 'pu-2');\n        }\n\n        for (var p in buffer) {\n          delete buffer[p];\n        }\n\n        return ret;\n      }\n    }\n  },\n  'pu-2': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '*': {\n          action_: 'output'\n        }\n      },\n      '*': {\n        '*': {\n          action_: ['output', 'cdot'],\n          nextState: '0'\n        }\n      },\n      '\\\\x': {\n        '*': {\n          action_: 'rm='\n        }\n      },\n      'space': {\n        '*': {\n          action_: ['output', 'space'],\n          nextState: '0'\n        }\n      },\n      '^{(...)}|^(-1)': {\n        '1': {\n          action_: '^(-1)'\n        }\n      },\n      '-9.,9': {\n        '0': {\n          action_: 'rm=',\n          nextState: '0'\n        },\n        '1': {\n          action_: '^(-1)',\n          nextState: '0'\n        }\n      },\n      '{...}|else': {\n        '*': {\n          action_: 'rm=',\n          nextState: '1'\n        }\n      }\n    }),\n    actions: {\n      'cdot': function () {\n        return {\n          type_: 'tight cdot'\n        };\n      },\n      '^(-1)': function (buffer, m) {\n        buffer.rm += \"^{\" + m + \"}\";\n      },\n      'space': function () {\n        return {\n          type_: 'pu-space-2'\n        };\n      },\n      'output': function (buffer) {\n        /** @type {ParserOutput | ParserOutput[]} */\n        var ret = [];\n\n        if (buffer.rm) {\n          var mrm = mhchemParser.patterns.match_('{(...)}', buffer.rm || \"\");\n\n          if (mrm && mrm.remainder === '') {\n            ret = mhchemParser.go(mrm.match_, 'pu');\n          } else {\n            ret = {\n              type_: 'rm',\n              p1: buffer.rm\n            };\n          }\n        }\n\n        for (var p in buffer) {\n          delete buffer[p];\n        }\n\n        return ret;\n      }\n    }\n  },\n  'pu-9,9': {\n    transitions: mhchemParser.createTransitions({\n      'empty': {\n        '0': {\n          action_: 'output-0'\n        },\n        'o': {\n          action_: 'output-o'\n        }\n      },\n      ',': {\n        '0': {\n          action_: ['output-0', 'comma'],\n          nextState: 'o'\n        }\n      },\n      '.': {\n        '0': {\n          action_: ['output-0', 'copy'],\n          nextState: 'o'\n        }\n      },\n      'else': {\n        '*': {\n          action_: 'text='\n        }\n      }\n    }),\n    actions: {\n      'comma': function () {\n        return {\n          type_: 'commaDecimal'\n        };\n      },\n      'output-0': function (buffer) {\n        /** @type {ParserOutput[]} */\n        var ret = [];\n        buffer.text_ = buffer.text_ || \"\";\n\n        if (buffer.text_.length > 4) {\n          var a = buffer.text_.length % 3;\n\n          if (a === 0) {\n            a = 3;\n          }\n\n          for (var i = buffer.text_.length - 3; i > 0; i -= 3) {\n            ret.push(buffer.text_.substr(i, 3));\n            ret.push({\n              type_: '1000 separator'\n            });\n          }\n\n          ret.push(buffer.text_.substr(0, a));\n          ret.reverse();\n        } else {\n          ret.push(buffer.text_);\n        }\n\n        for (var p in buffer) {\n          delete buffer[p];\n        }\n\n        return ret;\n      },\n      'output-o': function (buffer) {\n        /** @type {ParserOutput[]} */\n        var ret = [];\n        buffer.text_ = buffer.text_ || \"\";\n\n        if (buffer.text_.length > 4) {\n          var a = buffer.text_.length - 3;\n\n          for (var i = 0; i < a; i += 3) {\n            ret.push(buffer.text_.substr(i, 3));\n            ret.push({\n              type_: '1000 separator'\n            });\n          }\n\n          ret.push(buffer.text_.substr(i));\n        } else {\n          ret.push(buffer.text_);\n        }\n\n        for (var p in buffer) {\n          delete buffer[p];\n        }\n\n        return ret;\n      }\n    }\n  } //#endregion\n\n}; //\n// texify: Take MhchemParser output and convert it to TeX\n//\n\n/** @type {Texify} */\n\nvar texify = {\n  go: function (input, isInner) {\n    // (recursive, max 4 levels)\n    if (!input) {\n      return \"\";\n    }\n\n    var res = \"\";\n    var cee = false;\n\n    for (var i = 0; i < input.length; i++) {\n      var inputi = input[i];\n\n      if (typeof inputi === \"string\") {\n        res += inputi;\n      } else {\n        res += texify._go2(inputi);\n\n        if (inputi.type_ === '1st-level escape') {\n          cee = true;\n        }\n      }\n    }\n\n    if (!isInner && !cee && res) {\n      res = \"{\" + res + \"}\";\n    }\n\n    return res;\n  },\n  _goInner: function (input) {\n    if (!input) {\n      return input;\n    }\n\n    return texify.go(input, true);\n  },\n  _go2: function (buf) {\n    /** @type {undefined | string} */\n    var res;\n\n    switch (buf.type_) {\n      case 'chemfive':\n        res = \"\";\n        var b5 = {\n          a: texify._goInner(buf.a),\n          b: texify._goInner(buf.b),\n          p: texify._goInner(buf.p),\n          o: texify._goInner(buf.o),\n          q: texify._goInner(buf.q),\n          d: texify._goInner(buf.d)\n        }; //\n        // a\n        //\n\n        if (b5.a) {\n          if (b5.a.match(/^[+\\-]/)) {\n            b5.a = \"{\" + b5.a + \"}\";\n          }\n\n          res += b5.a + \"\\\\,\";\n        } //\n        // b and p\n        //\n\n\n        if (b5.b || b5.p) {\n          res += \"{\\\\vphantom{X}}\";\n          res += \"^{\\\\hphantom{\" + (b5.b || \"\") + \"}}_{\\\\hphantom{\" + (b5.p || \"\") + \"}}\";\n          res += \"{\\\\vphantom{X}}\";\n          res += \"^{\\\\smash[t]{\\\\vphantom{2}}\\\\mathllap{\" + (b5.b || \"\") + \"}}\";\n          res += \"_{\\\\vphantom{2}\\\\mathllap{\\\\smash[t]{\" + (b5.p || \"\") + \"}}}\";\n        } //\n        // o\n        //\n\n\n        if (b5.o) {\n          if (b5.o.match(/^[+\\-]/)) {\n            b5.o = \"{\" + b5.o + \"}\";\n          }\n\n          res += b5.o;\n        } //\n        // q and d\n        //\n\n\n        if (buf.dType === 'kv') {\n          if (b5.d || b5.q) {\n            res += \"{\\\\vphantom{X}}\";\n          }\n\n          if (b5.d) {\n            res += \"^{\" + b5.d + \"}\";\n          }\n\n          if (b5.q) {\n            res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n          }\n        } else if (buf.dType === 'oxidation') {\n          if (b5.d) {\n            res += \"{\\\\vphantom{X}}\";\n            res += \"^{\" + b5.d + \"}\";\n          }\n\n          if (b5.q) {\n            res += \"{\\\\vphantom{X}}\";\n            res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n          }\n        } else {\n          if (b5.q) {\n            res += \"{\\\\vphantom{X}}\";\n            res += \"_{\\\\smash[t]{\" + b5.q + \"}}\";\n          }\n\n          if (b5.d) {\n            res += \"{\\\\vphantom{X}}\";\n            res += \"^{\" + b5.d + \"}\";\n          }\n        }\n\n        break;\n\n      case 'rm':\n        res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n        break;\n\n      case 'text':\n        if (buf.p1.match(/[\\^_]/)) {\n          buf.p1 = buf.p1.replace(\" \", \"~\").replace(\"-\", \"\\\\text{-}\");\n          res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n        } else {\n          res = \"\\\\text{\" + buf.p1 + \"}\";\n        }\n\n        break;\n\n      case 'roman numeral':\n        res = \"\\\\mathrm{\" + buf.p1 + \"}\";\n        break;\n\n      case 'state of aggregation':\n        res = \"\\\\mskip2mu \" + texify._goInner(buf.p1);\n        break;\n\n      case 'state of aggregation subscript':\n        res = \"\\\\mskip1mu \" + texify._goInner(buf.p1);\n        break;\n\n      case 'bond':\n        res = texify._getBond(buf.kind_);\n\n        if (!res) {\n          throw [\"MhchemErrorBond\", \"mhchem Error. Unknown bond type (\" + buf.kind_ + \")\"];\n        }\n\n        break;\n\n      case 'frac':\n        var c = \"\\\\frac{\" + buf.p1 + \"}{\" + buf.p2 + \"}\";\n        res = \"\\\\mathchoice{\\\\textstyle\" + c + \"}{\" + c + \"}{\" + c + \"}{\" + c + \"}\";\n        break;\n\n      case 'pu-frac':\n        var d = \"\\\\frac{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n        res = \"\\\\mathchoice{\\\\textstyle\" + d + \"}{\" + d + \"}{\" + d + \"}{\" + d + \"}\";\n        break;\n\n      case 'tex-math':\n        res = buf.p1 + \" \";\n        break;\n\n      case 'frac-ce':\n        res = \"\\\\frac{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n        break;\n\n      case 'overset':\n        res = \"\\\\overset{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n        break;\n\n      case 'underset':\n        res = \"\\\\underset{\" + texify._goInner(buf.p1) + \"}{\" + texify._goInner(buf.p2) + \"}\";\n        break;\n\n      case 'underbrace':\n        res = \"\\\\underbrace{\" + texify._goInner(buf.p1) + \"}_{\" + texify._goInner(buf.p2) + \"}\";\n        break;\n\n      case 'color':\n        res = \"{\\\\color{\" + buf.color1 + \"}{\" + texify._goInner(buf.color2) + \"}}\";\n        break;\n\n      case 'color0':\n        res = \"\\\\color{\" + buf.color + \"}\";\n        break;\n\n      case 'arrow':\n        var b6 = {\n          rd: texify._goInner(buf.rd),\n          rq: texify._goInner(buf.rq)\n        };\n\n        var arrow = \"\\\\x\" + texify._getArrow(buf.r);\n\n        if (b6.rq) {\n          arrow += \"[{\" + b6.rq + \"}]\";\n        }\n\n        if (b6.rd) {\n          arrow += \"{\" + b6.rd + \"}\";\n        } else {\n          arrow += \"{}\";\n        }\n\n        res = arrow;\n        break;\n\n      case 'operator':\n        res = texify._getOperator(buf.kind_);\n        break;\n\n      case '1st-level escape':\n        res = buf.p1 + \" \"; // &, \\\\\\\\, \\\\hlin\n\n        break;\n\n      case 'space':\n        res = \" \";\n        break;\n\n      case 'entitySkip':\n        res = \"~\";\n        break;\n\n      case 'pu-space-1':\n        res = \"~\";\n        break;\n\n      case 'pu-space-2':\n        res = \"\\\\mkern3mu \";\n        break;\n\n      case '1000 separator':\n        res = \"\\\\mkern2mu \";\n        break;\n\n      case 'commaDecimal':\n        res = \"{,}\";\n        break;\n\n      case 'comma enumeration L':\n        res = \"{\" + buf.p1 + \"}\\\\mkern6mu \";\n        break;\n\n      case 'comma enumeration M':\n        res = \"{\" + buf.p1 + \"}\\\\mkern3mu \";\n        break;\n\n      case 'comma enumeration S':\n        res = \"{\" + buf.p1 + \"}\\\\mkern1mu \";\n        break;\n\n      case 'hyphen':\n        res = \"\\\\text{-}\";\n        break;\n\n      case 'addition compound':\n        res = \"\\\\,{\\\\cdot}\\\\,\";\n        break;\n\n      case 'electron dot':\n        res = \"\\\\mkern1mu \\\\bullet\\\\mkern1mu \";\n        break;\n\n      case 'KV x':\n        res = \"{\\\\times}\";\n        break;\n\n      case 'prime':\n        res = \"\\\\prime \";\n        break;\n\n      case 'cdot':\n        res = \"\\\\cdot \";\n        break;\n\n      case 'tight cdot':\n        res = \"\\\\mkern1mu{\\\\cdot}\\\\mkern1mu \";\n        break;\n\n      case 'times':\n        res = \"\\\\times \";\n        break;\n\n      case 'circa':\n        res = \"{\\\\sim}\";\n        break;\n\n      case '^':\n        res = \"uparrow\";\n        break;\n\n      case 'v':\n        res = \"downarrow\";\n        break;\n\n      case 'ellipsis':\n        res = \"\\\\ldots \";\n        break;\n\n      case '/':\n        res = \"/\";\n        break;\n\n      case ' / ':\n        res = \"\\\\,/\\\\,\";\n        break;\n\n      default:\n        assertNever(buf);\n        throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n      // Missing texify rule or unknown MhchemParser output\n    }\n\n    assertString(res);\n    return res;\n  },\n  _getArrow: function (a) {\n    switch (a) {\n      case \"->\":\n        return \"rightarrow\";\n\n      case \"\\u2192\":\n        return \"rightarrow\";\n\n      case \"\\u27F6\":\n        return \"rightarrow\";\n\n      case \"<-\":\n        return \"leftarrow\";\n\n      case \"<->\":\n        return \"leftrightarrow\";\n\n      case \"<--\x3e\":\n        return \"rightleftarrows\";\n\n      case \"<=>\":\n        return \"rightleftharpoons\";\n\n      case \"\\u21CC\":\n        return \"rightleftharpoons\";\n\n      case \"<=>>\":\n        return \"rightequilibrium\";\n\n      case \"<<=>\":\n        return \"leftequilibrium\";\n\n      default:\n        assertNever(a);\n        throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n    }\n  },\n  _getBond: function (a) {\n    switch (a) {\n      case \"-\":\n        return \"{-}\";\n\n      case \"1\":\n        return \"{-}\";\n\n      case \"=\":\n        return \"{=}\";\n\n      case \"2\":\n        return \"{=}\";\n\n      case \"#\":\n        return \"{\\\\equiv}\";\n\n      case \"3\":\n        return \"{\\\\equiv}\";\n\n      case \"~\":\n        return \"{\\\\tripledash}\";\n\n      case \"~-\":\n        return \"{\\\\mathrlap{\\\\raisebox{-.1em}{$-$}}\\\\raisebox{.1em}{$\\\\tripledash$}}\";\n\n      case \"~=\":\n        return \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$\\\\tripledash$}}-}\";\n\n      case \"~--\":\n        return \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$\\\\tripledash$}}-}\";\n\n      case \"-~-\":\n        return \"{\\\\mathrlap{\\\\raisebox{-.2em}{$-$}}\\\\mathrlap{\\\\raisebox{.2em}{$-$}}\\\\tripledash}\";\n\n      case \"...\":\n        return \"{{\\\\cdot}{\\\\cdot}{\\\\cdot}}\";\n\n      case \"....\":\n        return \"{{\\\\cdot}{\\\\cdot}{\\\\cdot}{\\\\cdot}}\";\n\n      case \"->\":\n        return \"{\\\\rightarrow}\";\n\n      case \"<-\":\n        return \"{\\\\leftarrow}\";\n\n      case \"<\":\n        return \"{<}\";\n\n      case \">\":\n        return \"{>}\";\n\n      default:\n        assertNever(a);\n        throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n    }\n  },\n  _getOperator: function (a) {\n    switch (a) {\n      case \"+\":\n        return \" {}+{} \";\n\n      case \"-\":\n        return \" {}-{} \";\n\n      case \"=\":\n        return \" {}={} \";\n\n      case \"<\":\n        return \" {}<{} \";\n\n      case \">\":\n        return \" {}>{} \";\n\n      case \"<<\":\n        return \" {}\\\\ll{} \";\n\n      case \">>\":\n        return \" {}\\\\gg{} \";\n\n      case \"\\\\pm\":\n        return \" {}\\\\pm{} \";\n\n      case \"\\\\approx\":\n        return \" {}\\\\approx{} \";\n\n      case \"$\\\\approx$\":\n        return \" {}\\\\approx{} \";\n\n      case \"v\":\n        return \" \\\\downarrow{} \";\n\n      case \"(v)\":\n        return \" \\\\downarrow{} \";\n\n      case \"^\":\n        return \" \\\\uparrow{} \";\n\n      case \"(^)\":\n        return \" \\\\uparrow{} \";\n\n      default:\n        assertNever(a);\n        throw [\"MhchemBugT\", \"mhchem bug T. Please report.\"];\n    }\n  }\n}; //\n// Helpers for code analysis\n// Will show type error at calling position\n//\n\n/** @param {number} a */\n\nfunction assertNever(a) {}\n/** @param {string} a */\n\n\nfunction assertString(a) {}\n__nested_webpack_exports__ = __nested_webpack_exports__[\"default\"];\n/******/ \treturn __nested_webpack_exports__;\n/******/ })()\n;\n});\n\n//# sourceURL=webpack://joplin-plugin-katex-input-helper/./node_modules/katex/dist/contrib/mhchem.js?")}}]);